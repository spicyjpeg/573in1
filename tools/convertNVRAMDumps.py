#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 573in1 - Copyright (C) 2022-2025 spicyjpeg
#
# 573in1 is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# 573in1 is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# 573in1. If not, see <https://www.gnu.org/licenses/>.

__version__ = "1.0.5"
__author__  = "spicyjpeg"

import os
from argparse        import ArgumentParser, Namespace
from collections.abc import Iterable, Sequence
from pathlib         import Path
from shutil          import copyfile
from typing          import BinaryIO, Callable

## Flash dump splitting/merging

_FLASH_BANK_LENGTH: int = 0x400000

def splitDump(
	mergedPath: str | Path,
	evenPath:   str | Path,
	oddPath:    str | Path,
	bankNames:  Iterable[str | int]
):
	with open(mergedPath, "rb") as file:
		for bank in bankNames:
			even: BinaryIO = open(str(evenPath).format(bank), "wb")
			odd:  BinaryIO = open(str(oddPath).format(bank),  "wb")

			with even, odd:
				data: bytes = file.read(_FLASH_BANK_LENGTH)

				even.write(data[0::2])
				odd.write(data[1::2])

def mergeDump(
	mergedPath: str | Path,
	evenPath:   str | Path,
	oddPath:    str | Path,
	bankNames:  Iterable[str | int]
):
	with open(mergedPath, "wb") as file:
		for bank in bankNames:
			even: BinaryIO = open(str(evenPath).format(bank), "rb")
			odd:  BinaryIO = open(str(oddPath).format(bank),  "rb")

			with even, odd:
				data: bytearray = bytearray(_FLASH_BANK_LENGTH)
				data[0::2]      = even.read(_FLASH_BANK_LENGTH // 2)
				data[1::2]      = odd.read(_FLASH_BANK_LENGTH // 2)

				file.write(data)

## Main

_RENAMED_FILES: Sequence[tuple[str, str]] = (
	( "bios.bin", "700a01.22g" ),
	( "rtc.bin",  "m48t58" )
)

_DEFAULT_PCMCIA_SIZE: int = 32

def createParser() -> ArgumentParser:
	parser = ArgumentParser(
		description = \
			"Renames and converts (splits or merges) ROM and/or NVRAM dumps "
			"generated by 573in1 for use with MAME and vice versa.",
		add_help    = False
	)

	group = parser.add_argument_group("Tool options")
	group.add_argument(
		"-h", "--help",
		action = "help",
		help   = "Show this help message and exit"
	)
	group.add_argument(
		"-m", "--merge",
		action = "store_true",
		help   = \
			"Convert MAME NVRAM files back to the format used by 573in1 "
			"instead of converting 573in1 dumps to MAME format"
	)

	group = parser.add_argument_group("PCMCIA card options")
	for card in ( 1, 2 ):
		group.add_argument(
			f"-{card}", f"--pcmcia{card}-size",
			type    = lambda value: int(value, 0),
			default = _DEFAULT_PCMCIA_SIZE,
			help    = \
				f"Set size of PCMCIA card in slot {card} in megabytes (default "
				f"{_DEFAULT_PCMCIA_SIZE})",
			metavar = "value"
		)

	group = parser.add_argument_group("File paths")
	group.add_argument(
		"-o", "--output",
		type    = Path,
		default = os.curdir,
		help    = "Path to output directory (current directory by default)",
		metavar = "dir"
	)
	group.add_argument(
		"input",
		type = Path,
		help = "Path to directory containing input files"
	)

	return parser

def main():
	parser: ArgumentParser = createParser()
	args:   Namespace      = parser.parse_args()

	converted: bool = False

	args.output.mkdir(parents = True, exist_ok = True)

	for merged, split in _RENAMED_FILES:
		source: str = split  if args.merge else merged
		dest:   str = merged if args.merge else split

		if os.path.isfile(args.input / source):
			copyfile(args.input / source, args.output / dest)
			converted = True

	mergedPath:  Path     = args.output if args.merge else args.input
	splitPath:   Path     = args.input  if args.merge else args.output
	convertDump: Callable = mergeDump   if args.merge else splitDump

	source: str = "29f016a.31m" if args.merge else "flash.bin"

	if os.path.isfile(args.input / source):
		convertDump(
			mergedPath / "flash.bin",
			splitPath  / "29f016a.31{}",
			splitPath  / "29f016a.27{}",
			( "m", "l", "j", "h" )
		)
		converted = True

	for card, size in enumerate(( args.pcmcia1_size, args.pcmcia2_size ), 1):
		prefix: str = f"pccard{card}_{size // 0x100000}mb"
		source: str = f"{prefix}_1l" if args.merge else f"pcmcia{card}.bin"

		if os.path.isfile(args.input / source):
			convertDump(
				mergedPath / f"pcmcia{card}.bin",
				splitPath  / f"{prefix}_{{}}l",
				splitPath  / f"{prefix}_{{}}u",
				range(1, (size // _FLASH_BANK_LENGTH) + 1)
			)
			converted = True

	if not converted:
		parser.error(
			"no suitable files to copy or convert found in input directory"
		)

if __name__ == "__main__":
	main()
